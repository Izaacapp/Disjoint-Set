Testing Strategy for Assignment 3 - Disjoint Set

Overview
This document outlines the testing strategy for Assignment 3, which involves the use of disjoint set data structures to solve the problem of reducing network connectivity by destroying connections.

Unit Tests
Objective: Validate individual components, particularly the disjoint set operations (find, union, path compression).
Approach:
Test find to ensure it returns the correct root.
Verify union merges two sets correctly, maintaining rank and path compression.
Include edge cases such as union of already connected components and find on single elements.

Integration Tests
Objective: Ensure disjoint set operations work together to solve the problem.
Approach:
Use provided sample inputs to test overall functionality.
Check connectivity calculations after each destruction step.
Confirm the program reads from standard input and outputs correctly.

System Tests
Objective: Validate the program against a wide range of inputs, including edge cases and large datasets.
Approach:
Create test files with varying numbers of nodes and connections.
Test with maximum allowed values to check efficiency and performance.
Include tests with multiple initial components to ensure proper handling of disconnected graphs.

Performance Testing
Objective: Ensure the program performs efficiently with maximum input size.
Approach:
Measure execution time for large inputs to ensure it runs within acceptable limits.
Optimize code if performance bottlenecks are identified.

Sample Test Case

Test Case 1: Basic Functionality
Input:
```
3 3 3
1 2
1 3
2 3
3
1
2
```
Expected Output:
```
9
9
5
3
```
Execution of Tests
The run_tests.sh script automates the test execution:

Compiles the Java program.
Runs the program with each input file.
Compares output against expected results.
Logs the results for review.
Script: run_tests.sh
```bash
#!/bin/bash

# Compile the Java program
javac Main.java
if [ $? -ne 0 ]; then
  echo "Compilation failed"
  exit 1
fi

# Define input and output files
input_files=("destroy_10.in" "destroy_sample_01.in" "destroy_sample_02.in")
output_files=("destroy_10.out" "destroy_sample_01.out" "destroy_sample_02.out")

# Log file for results
log_file="test_results.log"

# Initialize the log file
echo "Test Results - $(date)" > $log_file
echo "=====================================================================================================================" >> $log_file
printf "%-50s | %-50s\n" "Temporary Output" "Expected Output" >> $log_file
echo "=====================================================================================================================" >> $log_file

# Function to run a test case
run_test() {
  input_file=$1
  expected_output_file=$2
  temp_output_file="${input_file}.temp.out"
  temp_trimmed_output_file="${input_file}.trimmed.temp.out"
  expected_trimmed_output_file="${expected_output_file}.trimmed"

  echo "Running test with input: $input_file" | tee -a $log_file

  # Run the Java program with the input file
  java Main < "$input_file" > "$temp_output_file"
  if [ $? -ne 0 ]; then
    echo "Execution failed for input: $input_file" | tee -a $log_file
    return 1
  fi

  # Trim trailing whitespaces from the outputs
  tr -d '[:space:]' < "$temp_output_file" > "$temp_trimmed_output_file"
  tr -d '[:space:]' < "$expected_output_file" > "$expected_trimmed_output_file"

  # Compare the trimmed outputs
  if diff -q "$temp_trimmed_output_file" "$expected_trimmed_output_file" > /dev/null; then
    echo "Test passed for input: $input_file" | tee -a $log_file
  else
    echo "Test failed for input: $input_file" | tee -a $log_file
    echo "Differences:" | tee -a $log_file
    diff "$temp_trimmed_output_file" "$expected_trimmed_output_file" | tee -a $log_file
  fi

  # Append outputs to the log file for review
  paste <(cat $temp_output_file) <(cat $expected_output_file) | awk -F '\t' '{printf "%-50s | %-50s\n", $1, $2}' >> $log_file

  echo "=====================================================================================================================" >> $log_file

  # Clean up temporary files
  rm "$temp_output_file" "$temp_trimmed_output_file" "$expected_trimmed_output_file"
}

# Run all test cases
for (( i=0; i<${#input_files[@]}; i++ )); do
  run_test "${input_files[$i]}" "${output_files[$i]}"
done

echo "Test run complete. See $log_file for details."
```

Conclusion
This testing strategy ensures that the code for Assignment 3 is robust, correct, and efficient. Each test case validates different aspects of the program, ensuring comprehensive coverage and reliability.